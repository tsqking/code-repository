/**
 * Project Name:campus_community
 * File Name:UserController.java
 * Package Name:com.clps.web.controller
 * Date:2017年3月22日上午11:47:34
 * Copyright (c) 2017, tsqking@163.com All Rights Reserved.
 *
*/

package com.clps.web.controller;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.servlet.http.HttpSession;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import com.clps.common.bean.UserInfo;
import com.clps.common.exception.ActivityServiceException;
import com.clps.common.exception.UserServiceException;
import com.clps.common.util.DataTableHelper;
import com.clps.common.util.DateFormat;
import com.clps.common.util.MD5;
import com.clps.common.util.PageVo;
import com.clps.dao.UserInfoDao;
import com.clps.service.IUserInfoService;

/**
 * ClassName:UserController <br/>
 * Function: TODO ADD FUNCTION. <br/>
 * Reason: TODO ADD REASON. <br/>
 * Date: 2017年3月22日 上午11:47:34 <br/>
 * 
 * @author Charles
 * @version
 * @since JDK 1.8
 * @see
 */
@SuppressWarnings("all")
@Controller
public class UserController {
	Logger log = Logger.getRootLogger();
	private final String MESSAGE = "msg";
	Map<String, Object> resultMap = new HashMap<>();
	@Autowired
	private IUserInfoService service;
	@Autowired
	private UserInfoDao userInfoDao;

	/**
	 * register:(用户注册). <br/>
	 * 
	 * @author Charles
	 * @param request
	 * @param session
	 * @return
	 * @since JDK 1.8
	 */
	@RequestMapping(value = "register.do", method = RequestMethod.POST, consumes = "application/json", produces = "application/json")
	@ResponseBody
	public Map<String, Object> register(@RequestBody UserInfo userInfo) {
		String md5Str = MD5.getMD5Str(userInfo.getU_password());
		userInfo.setU_password(md5Str);
		userInfo.setU_point("100");
		userInfo.setU_register_date(DateFormat.format(new Date(), DateFormat.FORMAT_LONG));
		try {
			if (service.register(userInfo)) {
				if (userInfoDao.findUserById(userInfo.getU_id()) != null) {
					resultMap.put(MESSAGE, "该用户已存在");
					log.error("学号/工号" + userInfo.getU_id() + "已存在");
					return resultMap;
				}
				if (userInfoDao.findUserByNickName(userInfo.getU_nickname()) != null) {
					resultMap.put(MESSAGE, "该用户已存在");
					log.error("用户名" + userInfo.getU_nickname() + "已存在");
					return resultMap;
				}
				else{
					resultMap.put(MESSAGE, "注册成功");
					return resultMap;
				}
			} else {
				resultMap.put(MESSAGE, "注册失败");
				return resultMap;
			}
		} catch (UserServiceException e) {
			resultMap.put(MESSAGE, "注册失败");
			e.printStackTrace();
		}
		return resultMap;
	}

	/**
	 * login:(用户登录). <br/>
	 * 
	 * @author Charles
	 * @param request
	 * @param session
	 * @return
	 * @since JDK 1.8
	 */
	@RequestMapping(value = "login.do", method = RequestMethod.POST, consumes = "application/json", produces = "application/json")
	@ResponseBody
	public Map<String, Object> login(@RequestBody UserInfo userInfo, HttpSession session) {
		String nickName = userInfo.getU_nickname();
		String password = userInfo.getU_password();
		try {
			if (service.login(nickName, password)) {
				UserInfo user = service.findUserByNickname(nickName);
				session.setAttribute("userinfo", user);
				resultMap.put("username", userInfo.getU_nickname());
				resultMap.put(MESSAGE, "登录成功");
			} else {
				resultMap.put(MESSAGE, "登录失败");
			}
		} catch (UserServiceException e) {
			resultMap.put(MESSAGE, "登录失败");
			e.printStackTrace();
		}
		return resultMap;
	}

	/**
	 * self:(显示个人资料). <br/>
	 * 
	 * @author Charles
	 * @param userInfo
	 * @return
	 * @since JDK 1.8
	 */
	@RequestMapping(value = "self.do", method = RequestMethod.POST, consumes = "application/json", produces = "application/json")
	@ResponseBody
	public UserInfo self(@RequestBody UserInfo userInfo) {
		UserInfo user = null;
		try {
			user = service.findUserByNickname(userInfo.getU_nickname());
		} catch (UserServiceException e) {
			e.printStackTrace();
		}

		log.info(user);
		return user;
	}

	/**
	 * update:(修改自己的信息). <br/>
	 * 
	 * @author Charles
	 * @param userInfo
	 * @return
	 * @since JDK 1.8
	 */
	@RequestMapping(value = "updateSelf.do", method = RequestMethod.POST, consumes = "application/json", produces = "application/json")
	@ResponseBody
	public Map<String, Object> update(@RequestBody UserInfo userInfo, HttpSession session) {
		try {
			UserInfo user = service.updateUserInfo(userInfo);
			if (user != null) {
				resultMap.put(MESSAGE, "修改成功");
				session.setAttribute("userinfo", user);
			} else {
				resultMap.put(MESSAGE, "修改失败");
			}
		} catch (UserServiceException e) {
			resultMap.put(MESSAGE, "修改失败");
			e.printStackTrace();
		}
		return resultMap;
	}

	/**
	 * listAllUser:(分页查询所有用户). <br/>
	 * 
	 * @author Charles
	 * @param map
	 * @return
	 * @since JDK 1.8
	 */
	@RequestMapping(value = "listUser.do", method = RequestMethod.POST, consumes = "application/json", produces = "application/json")
	@ResponseBody
	private Map<String, Object> listAllUser(@RequestBody Map<String, Object> map) {
		DataTableHelper<UserInfo> dt = new DataTableHelper<>();
		PageVo<UserInfo> pv = dt.getTableData(map);
		try {
			pv = service.listAllUser(pv);
			resultMap = dt.getReturnMap(pv);
		} catch (ActivityServiceException e) {
			e.printStackTrace();
		}
		return resultMap;
	}

	@RequestMapping(value = "updateUser.do", method = RequestMethod.POST, consumes = "application/json", produces = "application/json")
	@ResponseBody
	public Map<String, Object> updateUser(@RequestBody UserInfo userInfo) {
		try {
			if (service.bgUpdateUser(userInfo)) {
				resultMap.put(MESSAGE, "修改成功");
			} else {
				resultMap.put(MESSAGE, "修改失败");
			}
		} catch (UserServiceException e) {
			resultMap.put(MESSAGE, "修改失败");
			e.printStackTrace();
		}
		return resultMap;
	}

	@RequestMapping(value = "deleteUser.do", method = RequestMethod.POST, consumes = "application/json", produces = "application/json")
	@ResponseBody
	public Map<String, Object> deleteUser(@RequestBody List<String> u_nickname) {
		if (u_nickname == null) {
			resultMap.put(MESSAGE, "删除失败");
		} else {
			for (String nickname : u_nickname) {
				try {
					if (service.deleteUser(nickname)) {
						resultMap.put(MESSAGE, "删除成功");
					} else {
						resultMap.put(MESSAGE, "删除失败");
					}
				} catch (UserServiceException e) {
					resultMap.put(MESSAGE, "删除失败");
					e.printStackTrace();
				}
			}
		}
		return resultMap;
	}
}
